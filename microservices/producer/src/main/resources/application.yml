server:
  port: 8080
  servlet:
    context-path: /producer

tools:
  kafka:
    enabled: true
  oauth2:
    enabled: true
  observability:
    enabled: true
  config-server:
    enabled: true

micro-producer:
  secrets:
    microservice-client:
      client-secret: ${DEV_OAUTH_MICROSERVICE-CLIENT}
  keycloak:
    host: localhost:9080
    realm: microservices_realm
  random:
    keys:
      - "Kafka"
      - "diaavlo"
      - "no fuimo"
  property: generic value


spring:
  profiles:
    active: local
  application:
    name: producer
  config:
    import: optional:configserver:http://${spring.cloud.config.host},optional:configtree:/run/secrets/
  security:
    oauth2:
      resource-server:
        jwt:
          jwk-set-uri: http://${micro-producer.keycloak.host:-localhost:9080}/realms/${micro-producer.keycloak.realm}/protocol/openid-connect/certs
  # This mode is only available on local, on docker containers it raises an error due to how the token is generated
  #
  #        opaque-token:
  #          introspection-uri: http://${micro-producer.keycloak.host:-localhost:9080}/realms/${micro-producer.keycloak.realm}/protocol/openid-connect/token/introspect
  #          client-id: microservice-client
  #          client-secret: ${micro-producer.secrets.microservice-client.client-secret}
  cloud:
    config:
      enabled: false
      host: localhost:9081/configserver
      name: producer
      profile: config
    # This property allows us to establish a branch inside the git repository to check out the configuration
    #      label: feature(_)spring-config-server
    stream:
      bindings:
        my-message-producer-out-0:
          producer:
            useNativeEncoding: true
            poller:
              fixed-delay: 15000
          destination: learning.stoopid-topic
          content-type: application/*+avro
